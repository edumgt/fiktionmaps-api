AWSTemplateFormatVersion: "2010-09-09"
Description: ECS cluster launchtype Fargate.
Parameters:
  EnvironmentName:
    Type: String
    Default: prod
    Description: "A name that will be used for namespacing our cluster resources."

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName}-cluster

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Name: !Sub ${EnvironmentName}-cluster-ALB
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnetOne
        - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnetTwo
      SecurityGroups: [!Ref "LoadBalancerSecurityGroup"]

  LoadBalancerListenerSecure:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
    Properties:
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-2:637423212230:certificate/82f35d0a-b11b-4a93-8877-7346cc9838f8
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "#{protocol}"
            Port: "#{port}"
            Host: "#{host}"
            Path: "/"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref "LoadBalancer"
      Port: 443
      Protocol: HTTPS

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref "LoadBalancer"
      Port: 80
      Protocol: "HTTP"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      GroupName: !Sub ${EnvironmentName}-cluster-security
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VpcId
      Protocol: "HTTP"
      Port: "80"

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-apis
      RetentionInDays: 1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref "LoadBalancerSecurityGroup"
          IpProtocol: -1
        - CidrIp: 10.100.0.0/16
          IpProtocol: -1

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub ecs.${EnvironmentName}
      Vpc:
        Fn::ImportValue: !Sub ${EnvironmentName}-VpcId
Outputs:
  PrivateNamespace:
    Description: Private dns namespace service discovery
    Value: !Ref PrivateNamespace
    Export:
      Name: !Sub ${EnvironmentName}-PrivateNamespace

  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref "ECSCluster"
    Export:
      Name: !Sub ${EnvironmentName}-ClusterName

  ContainerSecurityGroupName:
    Description: The name of the ECS cluster SG
    Value: !Ref "ContainerSecurityGroup"
    Export:
      Name: !Sub ${EnvironmentName}-ContainerSecurityGroup

  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListenerSecure
    Export:
      Name: !Sub ${EnvironmentName}-Listener

  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-DomainName
